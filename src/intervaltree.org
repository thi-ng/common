#+SETUPFILE: setup.org

* Namespace: thi.ng.common.data.intervaltree

This namespace contains an implementation of centered interval trees
based on the related [[http://en.wikipedia.org/wiki/Interval_tree#Centered_interval_tree][Wikipedia article]]. The first implementation is
using mutable fields and is *not* thread safe.

The tree maps intervals to values and can be queried for a given point
(number), for which it returns values of all matching intervals.
During querying, the intervals can be interpreted as closed,
half-open or open via the supplied =interval-fn= function or by using
one of the four presets: =closed=, =<open=, =open>= or =open=.

Furthermore multiple values can be mapped to the same interval, but
adding values is idempotent (provided a value is always associated
with the same interval).

#+BEGIN_SRC clojure :noweb-ref impl
  (defprotocol PIntervalTree
    (add-interval [_ i x])
    (query-point [_ x acc])
    (query-interval [_ i acc]))
  
  (defn sort-min
    [a b]
    (let [c (- (nth a 0) (nth b 0))]
      (if (zero? c) (- (nth a 1) (nth b 1)) c)))
  
  (defn sort-max
    [a b]
    (let [c (- (nth b 1) (nth a 1))]
      (if (zero? c) (- (nth b 0) (nth a 0)) c)))
  
  (deftype IntervalNode
      [median
       ^:unsynchronized-mutable left
       ^:unsynchronized-mutable right
       ^:unsynchronized-mutable c-left
       ^:unsynchronized-mutable c-right]
    PIntervalTree
    (add-interval [_ [il ih :as i] val]
      (cond
       (< ih median)
       (if left
         (add-interval left i val)
         (let [val #{val}]
           (set! left (IntervalNode. (mm/addm il ih 0.5) nil nil
                                     (sorted-map-by sort-min i val)
                                     (sorted-map-by sort-max i val)))))
  
       (> il median)
       (if right
         (add-interval right i val)
         (let [val #{val}]
           (set! right (IntervalNode. (mm/addm il ih 0.5) nil nil
                                      (sorted-map-by sort-min i val)
                                      (sorted-map-by sort-max i val)))))
  
       :else (do
               (set! c-left (update-in c-left [i] (fnil conj #{}) val))
               (set! c-right (update-in c-right [i] (fnil conj #{}) val))))
      _)
    (query-point
      [_ x acc]
      (let [acc (if (m/delta= x median)
                  (into acc (mapcat val c-left))
                  (if (< x median)
                    (->> c-left (r/take-while #(<= (nth (key %) 0) x)) (r/mapcat val) (into acc))
                    (->> c-right (r/take-while #(>= (nth (key %) 1) x)) (r/mapcat val) (into acc))))
            acc (if (and left (< x median))
                  (query-point left x acc)
                  acc)
            acc (if (and right (> x median))
                  (query-point right x acc)
                  acc)]
        acc))
    (query-interval
      [_ [a b :as i] acc]
      (let [acc (->> c-left
                     (r/filter #(let [k (key %)] (and (<= (nth k 0) b) (>= (nth k 1) a))))
                     (r/mapcat val)
                     (into acc))
            acc (if (and left (< a median))
                  (query-interval left i acc)
                  acc)
            acc (if (and right (> b median))
                  (query-interval right i acc)
                  acc)]
        acc))
    Object
    (toString
      [_]
      (str ":median " median
           ", :left " (pr-str left)
           ", :right " (pr-str right)
           ", :c-left " (pr-str c-left)
           ", :c-right " (pr-str c-right)
           )))
  
  (defn interval-tree
    ([x]
       (IntervalNode. x nil nil (sorted-map-by sort-min) (sorted-map-by sort-max)))
    ([x coll]
       (reduce (fn [t [k v]] (add-interval t k v)) (interval-tree x) coll)))
#+END_SRC
** Complete namespace definition                                   :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/common/data/intervaltree.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.common.data.intervaltree
   #+cljs (:require-macros [thi.ng.macromath.core :as mm])
   (:require
    [thi.ng.common.math.core :as m]
    [clojure.core.reducers :as r]
    #+clj [thi.ng.macromath.core :as mm]))

  <<impl>>
 #+END_SRC
