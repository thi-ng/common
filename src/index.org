#+SETUPFILE: setup.org
#+TITLE: thi.ng/common

* About the project

** Overview

Shared utility belt for [[http://thi.ng][thi.ng]] projects.

** Status

ALPHA quality & under regular development

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Injected properties

#+BEGIN_SRC clojure :noweb-ref version
0.3.0
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/common
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/common-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.6.0"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-2657"]
#+END_SRC
**** [[https://github.com/thi-ng/macromath][Macromath]]
#+BEGIN_SRC clojure :noweb-ref dep-mmath
[thi.ng/macromath "0.3.0"]
#+END_SRC
*** Development
**** [[https://github.com/lynaghk/cljx][Cljx]]
#+BEGIN_SRC clojure :noweb-ref dep-cljx
[com.keminglabs/cljx "0.5.0"]
#+END_SRC
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.3"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.4"]
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |

** Release history

| *Version* | *Released* | *Description*                | *Tagged Github URL* |
|-----------+------------+------------------------------+---------------------|
|     0.3.0 | 2015-01-19 | last version before split up | [[https://github.com/thi-ng/common/tree/0.3.0][0.3.0]]               |
|     0.2.0 | 2014-09-09 |                              | [[https://github.com/thi-ng/common/tree/0.2.0][0.2.0]]               |
|     0.1.2 | 2014-03-10 | 1st public release           | [[https://github.com/thi-ng/common/tree/0.1.2][0.1.2]]               |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/common <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi-ng/common.git
  cd common
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= (see below) includes REPL hooks for
CLJX, editing files in Org-mode, then re-loading & testing changes is
quite trivial. Simply launch a REPL (via =lein= or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace in the
REPL via =(require 'thi.ng.common... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/common "<<version>>"
    :description  "Shared utility belt for thi.ng projects"
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url  "https://github.com/thi-ng/common"}

    :min-lein-version "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-mmath>>]

    :source-paths ["src/cljx"]
    :test-paths   ["<<gen-test-path>>"]

    :profiles     {:dev {:dependencies [<<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins      [<<dep-cljx>>
                                        <<dep-cljsbuild>>
                                        <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :auto-clean false
                         :prep-tasks [["cljx" "once"] "javac" "compile"]
                         :aliases {"cleantest" ["do" "clean," "cljx" "once," "test," "cljsbuild" "test"]}}}

    :cljx         {:builds [{:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :clj}
                            {:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :cljs}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :clj}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :cljs}]}

    :cljsbuild    {:builds [{:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.common.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.common.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/common/version.cljx :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.common.version)

  (def version "<<version>>")
#+END_SRC

* Namespaces

- [[./byteutils.org][thi.ng.common.byteutils]]
- [[./data.org][thi.ng.common.data.core]]
- [[./error.org][thi.ng.common.error]]
- [[./heap.org][thi.ng.common.heap]]
- [[./intervaltree.org][thi.ng.common.intervaltree]]
- [[./math.org][thi.ng.common.math.core]]
- [[./simplexnoise.org][thi.ng.common.math.simplexnoise]]           
- [[./stringformat.org][thi.ng.common.stringformat]]           
- [[./unionfind.org][thi.ng.common.unionfind]]

* Tests

- [[../test/math.org][thi.ng.common.test.math.core]]
