#+SETUPFILE: setup.org

* Namespace: thi.ng.common.stringformat

** Number formatters
#+BEGIN_SRC clojure :noweb-ref formatters
  (def float
    (memoize
     (fn [prec]
       ,#+clj  (let [fmt (str "%1." prec "f")]
                (fn [x] (clojure.core/format fmt (double x))))
       ,#+cljs (fn [x] (.toFixed (js/Number. x) prec)))))

  (def pad-left
    (memoize
     (fn [len fill]
       (let [fill (apply str (repeat len fill))]
         (fn [x]
           (let [l (count x)]
             (if (< l len) (str (subs fill 0 (- len l)) x) x)))))))

  (def pad-right
    (memoize
     (fn [len fill]
       (let [fill (apply str (repeat len fill))]
         (fn [x]
           (let [l (count x)]
             (if (< l len) (str x (subs fill 0 (- len l))) x)))))))

  (defn trim-left
    [len]
    (fn [x]
      (let [l (count x)]
        (if (<= l len) x (subs x 0 len)))))

  (defn trim-right
    [len]
    (fn [x]
      (let [l (count x)]
        (if (<= l len) x (subs x (- l len))))))

  (def date-formats
    (let [d2 (comp (pad-left 2 "0") str)]
      {:yyyy-mm-dd [str "-" d2 "-" d2]
       :yyyy-mm-dd-hh-mm-ss [str "-" d2 "-" d2 " " d2 ":" d2 ":" d2]
       :dd-mm-yyyy [d2 "/" d2 "/" str]
       :dd-mm-yy   [d2 "/" d2 "/" (comp (trim-right 2) str)]}))

  ,#+clj
  (defn format
    [fmt & args]
    (loop [s (StringBuilder.), fmt fmt, args args]
      (if-let [f (first fmt)]
        (if (string? f)
          (recur (.append s f) (next fmt) args)
          (recur (.append s (f (first args))) (next fmt) (next args)))
        (.toString s))))

  ,#+cljs
  (defn format
    [fmt & args]
    (loop [s [], fmt fmt, args args]
      (if-let [f (first fmt)]
        (if (string? f)
          (recur (conj s f) (next fmt) args)
          (recur (conj s (f (first args))) (next fmt) (next args)))
        (apply str s))))
#+END_SRC

** Complete namespace definition                                   :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/common/stringformat.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.common.stringformat
    (:refer-clojure :exclude [float format]))

  <<formatters>>
#+END_SRC
