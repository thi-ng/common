#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#namespace-thingcommondatabyteutils][Namespace: thi.ng.common.data.byteutils]]
     - [[#todo-refactor-to-be-cljs-compatible][TODO refactor to be CLJS compatible]]
     - [[#conversion-functions][Conversion functions]]
     - [[#read-functions][Read functions]]
     - [[#write-functions][Write functions]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Namespace: thi.ng.common.data.byteutils

** TODO refactor to be CLJS compatible

** Conversion functions

#+BEGIN_SRC clojure :noweb-ref helpers
  #+clj (defn int->byte [x] (if (> x 0x7f) (- x 0x100) x))
  #+clj (defn byte->int [x] (if (neg? x) (+ x 0x100) x))
#+END_SRC

** Read functions

#+BEGIN_SRC clojure :noweb-ref read
  ,#+clj
  (defn read-int16-le
    [^InputStream in]
    (let [buf (byte-array 2)]
      (.read in buf 0 2)
      (bit-or (byte->int (aget buf 0)) (bit-shift-left (byte->int (aget buf 1)) 8))))
  ,#+cljs
  (defn read-int16-le
    [in])

  ,#+clj
  (defn read-int16-be
    [^InputStream in]
    (let [buf (byte-array 2)]
      (.read in buf 0 2)
      (bit-or (byte->int (aget buf 1)) (bit-shift-left (byte->int (aget buf 0)) 8))))
  ,#+cljs
  (defn read-int16-be
    [in])

  ,#+clj
  (defn read-int32-le
    [^InputStream in]
    (let [buf (byte-array 4)]
      (.read in buf 0 4)
      (bit-or
       (byte->int (aget buf 0))
       (bit-shift-left (byte->int (aget buf 1)) 8)
       (bit-shift-left (byte->int (aget buf 2)) 16)
       (bit-shift-left (byte->int (aget buf 3)) 24))))
  ,#+cljs
  (defn read-int32-le
    [in])

  ,#+clj
  (defn read-int32-be
    [^InputStream in]
    (let [buf (byte-array 4)]
      (.read in buf 0 4)
      (bit-or
       (byte->int (aget buf 3))
       (bit-shift-left (byte->int (aget buf 2)) 8)
       (bit-shift-left (byte->int (aget buf 1)) 16)
       (bit-shift-left (byte->int (aget buf 0)) 24))))
  ,#+cljs
  (defn read-int32-be
    [in])

  ,#+clj
  (defn read-float-le
    [^InputStream in]
    (Float/intBitsToFloat (unchecked-int (read-int32-le in))))
  ,#+cljs
  (defn read-float-le
    [in])

  ,#+clj
  (defn read-float-be
    [^InputStream in]
    (Float/intBitsToFloat (unchecked-int (read-int32-be in))))
  ,#+cljs
  (defn read-float-be
    [in])

  ,#+clj
  (defn read-vec3-le
    [^InputStream in]
    [(read-float-le in) (read-float-le in) (read-float-le in)])
  ,#+cljs
  (defn read-ve3-le
    [in])

  ,#+clj
  (defn read-vec3-be
    [^InputStream in]
    [(read-float-be in) (read-float-be in) (read-float-be in)])
  ,#+cljs
  (defn read-ve3-be
    [in])
#+END_SRC

** Write functions

#+BEGIN_SRC clojure :noweb-ref write
  ,#+clj
  (defn write-str-bytes
    [^OutputStream out ^String x]
    (.write out (.getBytes x))
    out)
  ,#+cljs
  (defn write-str-bytes
    [out x])

  ,#+clj
  (defn write-int16-le
    [^OutputStream out x]
    (.write
     out
     (byte-array
      [(unchecked-byte (bit-and x 0xff))
       (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff))]))
    out)
  ,#+cljs
  (defn write-int16-le
    [out x])

  ,#+clj
  (defn write-int16-be
    [^OutputStream out x]
    (.write
     out
     (byte-array
      [(unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff))
       (unchecked-byte (bit-and x 0xff))]))
    out)
  ,#+cljs
  (defn write-int16-be
    [out x])

  ,#+clj
  (defn write-int32-le
    [^OutputStream out x]
    (.write
     out
     (byte-array
      [(unchecked-byte (bit-and x 0xff))
       (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff))
       (unchecked-byte (bit-and (unsigned-bit-shift-right x 16) 0xff))
       (unchecked-byte (unsigned-bit-shift-right x 24))]))
    out)
  ,#+cljs
  (defn write-int32-le
    [out x])

  ,#+clj
  (defn write-int32-be
    [^OutputStream out x]
    (.write
     out
     (byte-array
      [(unchecked-byte (unsigned-bit-shift-right x 24))
       (unchecked-byte (bit-and (unsigned-bit-shift-right x 16) 0xff))
       (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff))
       (unchecked-byte (bit-and x 0xff))]))
    out)
  ,#+cljs
  (defn write-int32-be
    [out x])

  ,#+clj
  (defn write-float-le
    [^OutputStream out x]
    (write-int32-le out (Float/floatToRawIntBits x)))
  ,#+cljs
  (defn write-float-le
    [out x])

  ,#+clj
  (defn write-float-be
    [^OutputStream out x]
    (write-int32-be out (Float/floatToRawIntBits x)))
  ,#+cljs
  (defn write-float-be
    [out x])

  ,#+clj
  (defn write-vec3-le
    [^OutputStream out [x y z]]
    (write-float-le out x)
    (write-float-le out y)
    (write-float-le out z))
  ,#+cljs
  (defn write-vec3-le
    [out [x y z]])

  ,#+clj
  (defn write-vec3-be
    [^OutputStream out [x y z]]
    (write-float-be out x)
    (write-float-be out y)
    (write-float-be out z))
  ,#+cljs
  (defn write-vec3-be
    [out [x y z]])
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/common/data/byteutils.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.common.data.byteutils
    #+clj
    (:import
     [java.io OutputStream InputStream]))

  <<helpers>>

  <<read>>

  <<write>>
#+END_SRC
